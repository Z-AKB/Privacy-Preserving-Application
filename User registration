// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract UserRegistration {

    struct User {
        bool isRegistered;
        bytes32 commitment; // Hash or commitment of user identity
    }

    mapping(address => User) public users;

    event UserRegistered(address indexed user, bytes32 commitment);

    // Register a new user with a hashed commitment
    function registerUser(bytes32 _commitment) public {
        require(!users[msg.sender].isRegistered, "User already registered");
        
        // Store the user's commitment
        users[msg.sender] = User(true, _commitment);

        // Emit an event for transparency
        emit UserRegistered(msg.sender, _commitment);
    }

    // Simple check if a user is registered
    function isUserRegistered(address _user) public view returns (bool) {
        return users[_user].isRegistered;
    }
}
