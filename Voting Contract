// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract SimpleVoting {
    struct Candidate {
        uint matricNumber;
        string name;
        uint voteCount;
    }

    mapping(uint => Candidate) public candidates;
    mapping(address => bool) public voters;
    uint public candidatesCount;

    constructor() {
        addCandidate(7238, "Zion");
        addCandidate(6547, "Emmanuel");
        addCandidate(7784, "David");
        addCandidate(8905, "Sophia");
        addCandidate(7328, "John");
    }

     // Private function to add a new candidate to the election
    function addCandidate(uint _matricNumber, string memory _name) private {
        candidatesCount++;  
        candidates[_matricNumber] = Candidate(_matricNumber, _name, 0);
    }

    // Function to allow a voter to cast their vote for a candidate
    function castVote(uint _matricNumber) public {
        require(!voters[msg.sender], "You have already voted."); 
        require(candidates[_matricNumber].matricNumber != 0, "Invalid matriculation number."); 

        voters[msg.sender] = true;  
        candidates[_matricNumber].voteCount++;  
    }

     // Function to tally votes and determine the winner
     function tallyVotes() public view returns (string memory winnerName, uint winnerVoteCount) {
        uint winningVoteCount = 0;  
        string memory winningCandidate;  

        // for loop to go through all candidates to find the one with the most votes
        for (uint i = 1; i <= candidatesCount; i++) {
            if (candidates[i].voteCount > winningVoteCount) {
                winningVoteCount = candidates[i].voteCount;  
                winningCandidate = candidates[i].name;     
            }
        }

        return (winningCandidate, winningVoteCount);
    }
    // Function to verify the result for a specific candidate by their ID
     function verifyResult(uint _matricNumber) public view returns (string memory name, uint voteCount) {
        require(candidates[_matricNumber].matricNumber != 0, "Invalid matriculation number.");  // Ensure the matriculation number is valid
        return (candidates[_matricNumber].name, candidates[_matricNumber].voteCount);  // Return the candidate's name and their vote count
    }
}
