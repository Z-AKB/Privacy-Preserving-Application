// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract SchoolElection {
    // Mapping of student addresses to their registration status
    mapping (address => Student) public registeredStudents;

    // Mapping of candidate addresses to their information
    mapping (address => Candidate) public registeredCandidates;

    // Admin address (e.g. school administrator)
    address public admin;

    // Event emitted when a student registers
    event StudentRegistered(address student);

    // Event emitted when a candidate registers
    event CandidateRegistered(address candidate);

    // Event emitted when a vote is recorded
    event VoteRecorded(address student, address candidate);

    // Struct to store student information
    struct Student {
        bool registered;
        bool voted;
        string fullName;
        string matricNumber;
        string department;
        string hostelName;
        bytes32 encryptedVote;
    }

    // Struct to store candidate information
    struct Candidate {
        bool registered;
        string name;
        uint256 gradeLevel;
    }

    // Modifier to restrict access to admin only
    modifier onlyAdmin() {
        require(msg.sender == admin, "Only admin can perform this action");
        _;
    }

    // Constructor to set the admin address
    constructor() {
        admin = msg.sender;
    }

    // Function to register a student
    function registerStudent(
        address student,
        string memory fullName,
        string memory matricNumber,
        string memory department,
        string memory hostelName
    ) public onlyAdmin {
        require(!registeredStudents[student].registered, "Student already registered");
        registeredStudents[student].registered = true;
        registeredStudents[student].fullName = fullName;
        registeredStudents[student].matricNumber = matricNumber;
        registeredStudents[student].department = department;
        registeredStudents[student].hostelName = hostelName;
        emit StudentRegistered(student);
    }

    // ... (rest of the contract remains the same)
}
```
